** argomenti di interesse:**

colcon_cd:
echo "source /usr/share/colcon_cd/function/colcon_cd.sh" >> ~/.bashrc
echo "export _colcon_cd_root=/home/user/ros2_ws" >> ~/.bashrc
. ~/.bashrc

**How to set the initial location of the robot programmatically
corso ros2 navigation galactic capitolo 3**

def main(args=None):
    rclpy.init(args=args)
    try: 
        publisher = PublishInitialPosition()
        rclpy.spin(publisher)
    except KeyboardInterrupt:
        pass
    finally:
        publisher.destroy_node()
        rclpy.shutdown()

printenv ROS_DISTRO



# ROS2 navigation: multi-robot navigation
remappings=[
            ('/cmd_vel', '/tb3_0/cmd_vel'),
            ('/odom', '/tb3_0/odom'),
            ('/scan', '/tb3_0/scan'),],

ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args --remap cmd_vel:=/tb3_0/cmd_vel

# tar
tar -xvf ros2_sims_ws.tar 

# list cycle
security_route = [
        [1.792, 2.144],
        [1.792, -5.44]]
 for pt in security_route:
            pose.pose.position.x = pt[0]
            pose.pose.position.y = pt[1]
 
# whait to establish a connection before publishing
        while not rospy.is_shutdown():
            connections = self.pub.get_num_connections()
            if connections > 0:
                self.pub.publish(boundingBoxArray_object)
                
# to know if Qt is installet
qmake --version

# to know installation Qt directory
qmake -query QT_INSTALL_PREFIX
oppure
find / -name "Qt*" -type d 2>/dev/null

to configure qt5 on ubuntu (Qt5 already installed)
add at the end of .bashrc file
export QTDIR=/usr/lib/x86_64-linux-gnu/qt5
export PATH=$PATH:$QTDIR/bin

** find a package name and a package path **

import pkgutil
from ament_index_python.packages import get_package_share_directory
...
package_name = next(pkgutil.iter_modules()).name
package_path = get_package_share_directory(package_name)


# read the map.yaml file from the launch file itself
from launch import LaunchDescription
from launch.actions import ExecuteProcess
from launch_ros.actions import Node
import os

def generate_launch_description():
    # Script Python per ottenere il nome del file YAML
    get_yaml_filename_script = os.path.join(
        os.path.dirname(os.path.realpath(__file__)),
        'get_yaml_filename.py'
    )

    # Azione di lancio per eseguire lo script Python
    get_yaml_filename_action = ExecuteProcess(
        cmd=['python3', get_yaml_filename_script],
        output='screen'
    )

    # Nodo 'map_server' che legge il file YAML
    map_server_node = Node(
        package='nav2_map_server',
        executable='map_server',
        name='map_server',
        output='screen',
        parameters=[{
            'use_sim_time': True,
            'yaml_filename': '${yaml_filename}'
        }]
    )

    return LaunchDescription([
        get_yaml_filename_action,
        map_server_node
        # Altri nodi e azioni di lancio, se necessario
    ])
